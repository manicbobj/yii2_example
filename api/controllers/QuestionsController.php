<?php
/**
 * Created by PhpStorm.
 * UserType: osboxes
 * Date: 14/11/17
 * Time: 17:23
 */

namespace app\api\controllers;


use app\engines\generator\GeneratorBase;
use app\engines\generator\GeneratorFactory;
use app\engines\scoring\ScoreSimpleMatch;
use app\models\Question;
use app\models\QuestionTemplate;
use app\models\Test;
use app\models\TestSession;
use yii\data\ActiveDataProvider;
use yii\mongodb\Query;
use yii\rest\ActiveController;
use yii\rest\Controller;

class QuestionsController extends Controller
{
    public function actions()
    {
        return [
            'options' => [
                'class' => 'yii\rest\OptionsAction',
                'resourceOptions' => ['OPTIONS', 'POST']
            ],
        ];
    }

    protected function verbs()
    {
        $verbs = parent::verbs(); // TODO: Change the autogenerated stub
        $verbs['create'] = ['POST'];
        $verbs['score'] = ['POST'];
        $verbs['next'] = ['POST', 'OPTIONS'];
        return $verbs;
    }

    public function actionBySession($session_id, $index) {
        if(!$session_id) {
            return [
                'success' => false,
                'message' => 'Session ID is required'
            ];
        }

        $session = $this->getTestSessionById($session_id);
        if(!$session) {
            return [
                'success' => false,
                'message' => 'Session was not found'
            ];
        }

        $questions = $session->questions;
        if($index > count($questions) || $index <= 0) {
            return [
                'success' => false,
                'message' => 'QuestionType index is invalid'
            ];
        }

        return [
            'success' => true,
            'data' => $questions[$index - 1]
        ];
    }

    public function actionScore($session_id, $index) {
        $request = \Yii::$app->request;

        $session = $this->getTestSessionById($session_id);

        if(!$session) {
            return [
                'success' => false,
                'message' => 'Session was not found'
            ];
        }

        $questions = $session->questions;
        $question_idx = $index;
        $response = $request->post('response');

        if(!$response) {
            return [
                'success' => false,
                'message'=> 'Response value is required'
            ];
        }

        $score_engine = new ScoreSimpleMatch();

        $question = $questions[$question_idx];
        $question['response'] = $response;
        $question['result'] = $score_engine->score($question);

        $questions[$question_idx] = $question;

        // Calculate total score
        $score = 0;
        foreach($questions as $q) {
            if(isset($q['result'])) {
                $score += $q['result']['score'];
            }
        }

        $session->score = $score;
        $session->questions = $questions;
        $session->save();

        $session->questions = NULL;
        return [
            'success'=> true,
            'data'=> [
                'question' => $question,
                'session' => $session
            ]
        ];
    }

    public function actionNext() {
        $request = \Yii::$app->request;
        $session_id = $request->post('session_id');

        if(!$session_id) {
            return [
                'success' => false,
                'message' => 'Session ID is required'
            ];
        }

        $session = $this->getTestSessionById($session_id);
        if(!$session) {
            return [
                'success' => false,
                'message' => 'Session was not found'
            ];
        }

        $test = $this->getTestById($session->test_id);
        if(!$test) {
            return [
                'success' => false,
                'message' => 'TestType was not found'
            ];
        }

        // Generate question based on question templates. QuestionType Template is randomly selected.
        if($session->open_question < $session->num_questions) {

            if($session->open_question < count($session->questions)) {
                $question = $session->questions[$session->open_question];
                $session->open_question = $session->open_question + 1;
                $session->save();
            }
            else {
                // Generate
                $question_type = $test->question_types[rand(0, count($test->question_types) - 1)];
                $question = $this->generateQuestion($question_type, $session);

                $questions = $session->questions;
                $questions[] = $question;

                if($question == NULL) {
                    return [
                        'success' => false,
                        'question_type' => $question_type,
                        'message' => 'Generating question was failed'
                    ];
                }

                $session->questions = $questions;
                $session->open_question = $session->open_question + 1;
                $session->save();
            }

            // Remove validation information for security and return
            $question['validation'] = NULL;
            $session->questions = NULL;

            return [
                'success' => true,
                'data' => [
                    'question' => $question,
                    'session' => $session
                ]
            ];
        }
        else {
            return [
                'success' => false,
                'message' => "All question was generated."
            ];
        }

    }

    private function generateQuestion($question_type, $session) {
        $query = new Query();

        $template = $query
            ->from('question_templates')
            ->where(['id' => $question_type])
            ->one();

        if(!$template)
            return NULL;

        $engine_name = $template['generator_engine'];

        $generator = GeneratorFactory::instantiate($engine_name);

        if($generator == NULL)
            return NULL;

        $question = $generator->generate($template, $session->difficulty);
        return $question;
    }

    private function getTestSessionById($id) :TestSession {
        $provider = new ActiveDataProvider([
            'query' => TestSession::find()->where(['_id' => $id])
        ]);
        $models = $provider->getModels();
        if(count($models) > 0) {
            return $models[0];
        } else {
            return NULL;
        }
    }

    private function getTestById($id) :Test {
        $provider = new ActiveDataProvider([
            'query' => Test::find()->where(['id' => intval($id)])
        ]);
        $models = $provider->getModels();

        if(count($models) > 0) {
            return $models[0];
        } else {
            return NULL;
        }
    }
}